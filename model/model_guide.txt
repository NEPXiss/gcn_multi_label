How to run:
#######################################################

ตัวอย่าง

python model/gcn_model.py --epochs 50 --hidden_dim 64 --use-posweight --tune-thresholds --val-split 0.2

#######################################################

ทุก flag ที่สำคัญ (อธิบายทีละอัน)

--data : path ของ PyG Data object (default: processed_data/gcn_data.pt).

--epochs : จำนวน epoch ในการฝึก (default: 100).

--lr : learning rate (default: 1e-3).

--hidden_dim : ขนาดมิติซ่อนของ GCN (default: 64).

--weight_decay : L2 weight decay สำหรับ optimizer.

--dropout : dropout rate ในโมเดล.

--batchnorm : ถ้ามี flag นี้จะเปิด BatchNorm (default off).

--layernorm : ถ้ามี flag นี้จะเปิด LayerNorm (default off).

--device : 'cpu' หรือ 'cuda' (default: auto detect).

--save-model : path สำหรับบันทึก state_dict ของโมเดล (default: processed_data/gcn_model.pt).

--output : path สำหรับ prediction CSV (default: processed_data/prediction_output.csv).

--val-split : สัดส่วน validation (node-level random split) เช่น 0.2 = 20% validation. ถ้า 0 จะไม่มี validation (แต่จะไม่ tune thresholds ด้วย).

--seed : seed สำหรับสุ่ม (reproducibility).

--early-stop : จำนวน epoch ที่รอเมื่อไม่มีการปรับปรุง validation micro-F1 (default: 15).

--tune-thresholds : ถ้เปิด จะรับ thresholds ที่ tune (training wrapper already tunes on val and returns best thresholds).

--use-posweight : คำนวณ pos_weight จาก labels และใส่เข้า BCEWithLogitsLoss เพื่อชดเชย class imbalance.

#########################################

ผลลัพธ์ที่ได้หลังรัน

processed_data/gcn_model.pt (default) — ไฟล์ state_dict ของโมเดล (คุณสามารถโหลดด้วย model.load_state_dict(torch.load(path)))

processed_data/prediction_output.csv — ตารางที่เก็บ sample_id, true_label_{j}, prob_label_{j}, pred_label_{j} สำหรับแต่ละ label (j = 0..D-1)

ข้อความสรุป metric (micro_F1, macro_F1 ฯลฯ) จะพิมพ์บน terminal